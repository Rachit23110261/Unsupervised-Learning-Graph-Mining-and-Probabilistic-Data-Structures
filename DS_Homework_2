{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11194633,"sourceType":"datasetVersion","datasetId":6988839},{"sourceId":11207110,"sourceType":"datasetVersion","datasetId":6997772}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, C\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-03T10:44:20.006773Z","iopub.execute_input":"2025-04-03T10:44:20.007120Z","iopub.status.idle":"2025-04-03T10:44:20.019811Z","shell.execute_reply.started":"2025-04-03T10:44:20.007095Z","shell.execute_reply":"2025-04-03T10:44:20.018538Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/email-dataset/email-Eu-core-department-labels.txt\n/kaggle/input/email-dataset/email-Eu-core.txt\n/kaggle/input/facebook/facebook_large/musae_facebook_features.json\n/kaggle/input/facebook/facebook_large/citing.txt\n/kaggle/input/facebook/facebook_large/musae_facebook_edges.csv\n/kaggle/input/facebook/facebook_large/README.txt\n/kaggle/input/facebook/facebook_large/musae_facebook_target.csv\n","output_type":"stream"}],"execution_count":34},{"cell_type":"markdown","source":"## Question 1","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nedges= pd.read_csv(\"/kaggle/input/facebook/facebook_large/musae_facebook_edges.csv\")\npage_topic= pd.read_csv(\"/kaggle/input/facebook/facebook_large/musae_facebook_target.csv\")\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T10:44:20.021330Z","iopub.execute_input":"2025-04-03T10:44:20.021786Z","iopub.status.idle":"2025-04-03T10:44:20.105453Z","shell.execute_reply.started":"2025-04-03T10:44:20.021738Z","shell.execute_reply":"2025-04-03T10:44:20.104188Z"}},"outputs":[{"name":"stdout","text":"Loaded Columns: Index(['id', 'facebook_id', 'page_name', 'page_type'], dtype='object')\nLoaded Columns: (22470, 4)\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"Graph= {}\nDegrees = {}\nEdges=[]\nfor index, row in edges.iterrows():\n    Edges.append((row[\"id_1\"], row[\"id_2\"]))\n    if row[\"id_1\"] in Graph:\n         Graph[row[\"id_1\"]].append(row[\"id_2\"])\n         Degrees[row[\"id_1\"]]+=1\n    else:\n        Degrees[row[\"id_1\"]]=1\n        Graph[row[\"id_1\"]]=[row[\"id_2\"]]\n        \n    if row[\"id_2\"] in Graph:\n         Graph[row[\"id_2\"]].append(row[\"id_1\"])\n         Degrees[row[\"id_2\"]]+=1   \n    else:\n        Graph[row[\"id_2\"]]=[row[\"id_1\"]]\n        Degrees[row[\"id_2\"]]=1\n        \nprint(len(Degrees))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:00:07.498363Z","iopub.execute_input":"2025-04-03T11:00:07.498731Z","iopub.status.idle":"2025-04-03T11:00:17.936793Z","shell.execute_reply.started":"2025-04-03T11:00:07.498705Z","shell.execute_reply":"2025-04-03T11:00:17.935496Z"}},"outputs":[{"name":"stdout","text":"22470\n","output_type":"stream"}],"execution_count":51},{"cell_type":"code","source":"import numpy as np\ndensity= (np.sum(list(Degrees.values())))/len(Degrees.values())\nprint(density/2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T10:46:04.476181Z","iopub.execute_input":"2025-04-03T10:46:04.476543Z","iopub.status.idle":"2025-04-03T10:46:04.484121Z","shell.execute_reply.started":"2025-04-03T10:46:04.476519Z","shell.execute_reply":"2025-04-03T10:46:04.482867Z"}},"outputs":[{"name":"stdout","text":"7.610235870048954\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"import heapq\nfrom collections import defaultdict\nimport copy\n\ndeleted_nodes = set()\nheap = [(value, key) for key, value in Degrees.items()]\nheapq.heapify(heap)\ndegree_sum = sum(Degrees.values())\nmax_density = degree_sum / (len(Degrees)*2)\nDensest_graph, Densest_Degrees = copy.deepcopy(Graph), copy.deepcopy(Degrees)\ntotal_edges = sum(len(neighbors) for neighbors in Graph.values()) // 2  \niterations = 0\nwhile heap:\n    degree, i_d = heapq.heappop(heap)\n    \n    if i_d in deleted_nodes: \n        continue\n    \n    total_edges -= degree\n\n    neighbors = Graph.pop(i_d, [])\n    Degrees.pop(i_d, None)\n    deleted_nodes.add(i_d) \n    \n    for neighbour in neighbors:\n        if neighbour in Graph and i_d in Graph[neighbour]:\n            Graph[neighbour].remove(i_d)\n            Degrees[neighbour] -= 1\n    density = total_edges / len(Degrees) if len(Degrees) > 0 else 0\n    if max_density < density:\n        max_density = density\n        Densest_graph = copy.copy(Graph)\n        Densest_Degrees = copy.copy(Degrees)\n    heap = [(value, key) for key, value in Degrees.items() if value > 0]\n    heapq.heapify(heap)\n    iterations += 1\n    if iterations % 1000 == 0:\n        print(iterations,max_density)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:00:31.609176Z","iopub.execute_input":"2025-04-03T11:00:31.609609Z","iopub.status.idle":"2025-04-03T11:03:20.643100Z","shell.execute_reply.started":"2025-04-03T11:00:31.609579Z","shell.execute_reply":"2025-04-03T11:03:20.641911Z"}},"outputs":[{"name":"stdout","text":"1000 7.9181183046110855\n2000 8.256082071323888\n3000 8.624447868515665\n4000 8.990308608554413\n5000 9.395821408128219\n6000 9.828354584092288\n7000 10.284292178409826\n8000 10.791015894955079\n9000 11.324053452115812\n10000 11.915958299919808\n11000 12.553095030514385\n12000 13.26647564469914\n13000 14.061140443505808\n14000 14.943329397874852\n15000 15.974698795180723\n16000 17.137867078825348\n17000 18.479159049360145\n18000 19.98970917225951\n19000 21.777521613832853\n20000 24.009716599190284\n21000 26.96530612244898\n22000 31.501930501930502\n","output_type":"stream"}],"execution_count":52},{"cell_type":"code","source":"print(max_density)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:04:05.252737Z","iopub.execute_input":"2025-04-03T11:04:05.253111Z","iopub.status.idle":"2025-04-03T11:04:05.259027Z","shell.execute_reply.started":"2025-04-03T11:04:05.253086Z","shell.execute_reply":"2025-04-03T11:04:05.257792Z"}},"outputs":[{"name":"stdout","text":"32.72222222222222\n","output_type":"stream"}],"execution_count":54},{"cell_type":"code","source":"Graph= {}\nDegrees = {}\nEdges=[]\nfor index, row in edges.iterrows():\n    Edges.append((row[\"id_1\"], row[\"id_2\"]))\n    if row[\"id_1\"] in Graph:\n         Graph[row[\"id_1\"]].append(row[\"id_2\"])\n         Degrees[row[\"id_1\"]]+=1\n    else:\n        Degrees[row[\"id_1\"]]=1\n        Graph[row[\"id_1\"]]=[row[\"id_2\"]]\n        \n    if row[\"id_2\"] in Graph:\n         Graph[row[\"id_2\"]].append(row[\"id_1\"])\n         Degrees[row[\"id_2\"]]+=1   \n    else:\n        Graph[row[\"id_2\"]]=[row[\"id_1\"]]\n        Degrees[row[\"id_2\"]]=1\n        \nprint(len(Degrees))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:04:14.467392Z","iopub.execute_input":"2025-04-03T11:04:14.467830Z","iopub.status.idle":"2025-04-03T11:04:24.776456Z","shell.execute_reply.started":"2025-04-03T11:04:14.467798Z","shell.execute_reply":"2025-04-03T11:04:24.775195Z"}},"outputs":[{"name":"stdout","text":"22470\n","output_type":"stream"}],"execution_count":55},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom collections import Counter\n\nid_to_type = dict(zip(page_topic['id'], page_topic['page_type']))\nds_categories = [id_to_type.get(node, \"Unknown\") for node in Densest_graph.keys()]\noverall_categories = [id_to_type.get(node, \"Unknown\") for node in Graph.keys()]\n\nds_histogram = Counter(ds_categories)\noverall_histogram = Counter(overall_categories)\n\nprint(\"Densest Subgraph Categories:\")\nfor category, count in ds_histogram.items():\n    print(f\"{category}: {count}\")\n\nprint(\"\\nOverall Graph Categories:\")\nfor category, count in overall_histogram.items():\n    print(f\"{category}: {count}\")\n\nds_series = pd.Series(ds_histogram).sort_values(ascending=False)\noverall_series = pd.Series(overall_histogram).sort_values(ascending=False)\n\n# Plot histograms\nfig, ax = plt.subplots(1, 2, figsize=(12, 5))\nds_series.plot(kind='bar', ax=ax[1], title='Densest Subgraph Page Categories', color='green')\noverall_series.plot(kind='bar', ax=ax[0], title='Overall Page Categories', color='blue')\n\n# Formatting\nax[0].set_ylabel(\"Count\")\nax[1].set_ylabel(\"Count\")\nax[0].set_xlabel(\"Category\")\nax[1].set_xlabel(\"Category\")\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:05:38.705770Z","iopub.execute_input":"2025-04-03T11:05:38.706160Z","iopub.status.idle":"2025-04-03T11:05:39.170799Z","shell.execute_reply.started":"2025-04-03T11:05:38.706129Z","shell.execute_reply":"2025-04-03T11:05:39.169630Z"}},"outputs":[{"name":"stdout","text":"Densest Subgraph Categories:\ngovernment: 277\ncompany: 18\ntvshow: 65\n\nOverall Graph Categories:\ntvshow: 3327\ngovernment: 6880\ncompany: 6495\npolitician: 5768\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":58},{"cell_type":"markdown","source":"## Question 2","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom numpy.linalg import norm\nnum_nodes= 1005\nAdj = np.zeros((1005, 1005), dtype=int)\nD = np.zeros(1005, dtype=int)\n\n\nwith open(\"/kaggle/input/email-dataset/email-Eu-core.txt\", \"r\") as file:  \n    for line in file:\n        u, v = map(int, line.split())\n        if u!=v:\n            Adj[u][v]=1\n            Adj[v][u]=1\n            D[u]+=1        \n            D[v]+=1\n\n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:32:07.760605Z","iopub.execute_input":"2025-04-03T11:32:07.761058Z","iopub.status.idle":"2025-04-03T11:32:07.870512Z","shell.execute_reply.started":"2025-04-03T11:32:07.761028Z","shell.execute_reply":"2025-04-03T11:32:07.869587Z"}},"outputs":[],"execution_count":75},{"cell_type":"code","source":"def dfs(node, adj, visited, component):\n    stack = [node]\n    while stack:\n        v = stack.pop()\n        if not visited[v]:\n            visited[v] = True\n            component.append(v)\n            stack.extend(np.where(adj[v] == 1)[0])  # Add neighbors to stack\n\ndef find_largest_connected_component(adj):\n    num_nodes = adj.shape[0]\n    visited = np.zeros(num_nodes, dtype=bool)\n    largest_component = []\n\n    for node in range(num_nodes):\n        if not visited[node]:\n            component = []\n            dfs(node, adj, visited, component)\n            if len(component) > len(largest_component):\n                largest_component = component\n    largest_component = np.array(largest_component)\n    new_adj = adj[np.ix_(largest_component, largest_component)]\n    new_degree = np.sum(new_adj, axis=1)\n    return new_adj, new_degree, largest_component\nadj,D, largest_component = find_largest_connected_component(Adj)   \nD_inv_sqrt = np.diag(1 / np.sqrt(D))\nL_norm = np.eye(len(largest_component))- np.dot(np.dot(D_inv_sqrt,adj),D_inv_sqrt)\nprint(len(largest_component))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:33:15.060699Z","iopub.execute_input":"2025-04-03T11:33:15.061064Z","iopub.status.idle":"2025-04-03T11:33:15.162033Z","shell.execute_reply.started":"2025-04-03T11:33:15.061036Z","shell.execute_reply":"2025-04-03T11:33:15.160936Z"}},"outputs":[{"name":"stdout","text":"986\n","output_type":"stream"}],"execution_count":81},{"cell_type":"code","source":"import numpy as np\nfrom scipy.sparse.linalg import eigsh \neigenvalues, eigenvectors = eigsh(L_norm, k=2, which='SM') \nsecond_smallest_eigenvalue = eigenvalues[1]\nsecond_smallest_eigenvector = eigenvectors[:, 1]\nprint(\"Second smallest eigenvalue:\", second_smallest_eigenvalue)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:33:17.399417Z","iopub.execute_input":"2025-04-03T11:33:17.399768Z","iopub.status.idle":"2025-04-03T11:33:17.436404Z","shell.execute_reply.started":"2025-04-03T11:33:17.399738Z","shell.execute_reply":"2025-04-03T11:33:17.435123Z"}},"outputs":[{"name":"stdout","text":"Second smallest eigenvalue: 0.21214955108262337\n","output_type":"stream"}],"execution_count":82},{"cell_type":"code","source":"nodes = list(range(len(second_smallest_eigenvector))) \ns_nodes = sorted(zip(nodes, second_smallest_eigenvector), key=lambda x: x[1])\nd_left=0\nd_right= np.sum(D)\nS_edges=0\nmin_cond= float(('inf'))\nSparset_cut=([],[])\nfor i in range(1,len(s_nodes)-1):\n    elt, eig=s_nodes[i]\n    Deg= D[elt]\n    d_left+=Deg\n    d_right-=Deg\n    for j in range(len(s_nodes)):\n        if j< i:\n            S_edges-=Adj[elt][s_nodes[j][0]]\n        elif j>i:\n            S_edges+=Adj[elt][s_nodes[j][0]]\n    conductance= S_edges/ min(d_left,d_right)        \n    if min_cond> conductance:\n        min_cond= conductance\n        Sparset_cut = ([s_nodes[j][0] for j in range(i)], \n                           [s_nodes[j][0] for j in range(i, len(s_nodes))])\nprint(len(Sparset_cut[0]), len(Sparset_cut[1]))\nprint(min_cond)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:33:19.736104Z","iopub.execute_input":"2025-04-03T11:33:19.736476Z","iopub.status.idle":"2025-04-03T11:33:20.336416Z","shell.execute_reply.started":"2025-04-03T11:33:19.736445Z","shell.execute_reply":"2025-04-03T11:33:20.335178Z"}},"outputs":[{"name":"stdout","text":"916 70\n0.32655038759689925\n","output_type":"stream"}],"execution_count":83},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\ndept=[]\nwith open(\"/kaggle/input/email-dataset/email-Eu-core-department-labels.txt\", \"r\") as file:  \n    for line in file:\n        u, v = map(int, line.split())\n        dept.append(v)\nS_partition = Sparset_cut[0]\nT_partition = Sparset_cut[1]\ndept_S = [dept[node] for node in S_partition]\ndept_T = [dept[node] for node in T_partition]\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\nplt.hist(dept_S, bins=range(min(dept), max(dept) + 2), edgecolor='black', alpha=0.7)\nplt.xlabel(\"Department\")\nplt.ylabel(\"Count\")\nplt.title(\"Department Distribution in S Partition\")\n\nplt.subplot(1, 2, 2)\nplt.hist(dept_T, bins=range(min(dept), max(dept) + 2), edgecolor='black', alpha=0.7)\nplt.xlabel(\"Department\")\nplt.ylabel(\"Count\")\nplt.title(\"Department Distribution in T Partition\")\n\nplt.tight_layout()\nplt.show()        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:33:24.591860Z","iopub.execute_input":"2025-04-03T11:33:24.592205Z","iopub.status.idle":"2025-04-03T11:33:25.097313Z","shell.execute_reply.started":"2025-04-03T11:33:24.592180Z","shell.execute_reply":"2025-04-03T11:33:25.096228Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":84},{"cell_type":"markdown","source":"## Question 3","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nnp.random.seed(42)\nrandom1 = np.random.normal(0, 1, size=100)\nrandom2 = np.random.normal(3, 1, size=100)\ndataset= np.concatenate((random1,random2)).reshape(-1,1)\nkmeans = KMeans(n_clusters=2, random_state=42, n_init=10)\nlabels = kmeans.fit_predict(dataset)\nprint(labels)\nprint(\"Cluster centers:\", kmeans.cluster_centers_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:08:23.774301Z","iopub.execute_input":"2025-04-03T11:08:23.774704Z","iopub.status.idle":"2025-04-03T11:08:23.797565Z","shell.execute_reply.started":"2025-04-03T11:08:23.774673Z","shell.execute_reply":"2025-04-03T11:08:23.795353Z"}},"outputs":[{"name":"stdout","text":"[0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1\n 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\nCluster centers: [[-0.21600177]\n [ 2.94481107]]\n","output_type":"stream"}],"execution_count":64},{"cell_type":"code","source":"accuracy=0\nfor i in range(len(labels)):\n    if i < 100:\n        accuracy+= (labels[i]==0)/200\n    else:\n        accuracy+= (labels[i]==1)/200\nprint(\"fraction of points\" ,accuracy)        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:08:28.351960Z","iopub.execute_input":"2025-04-03T11:08:28.352347Z","iopub.status.idle":"2025-04-03T11:08:28.359878Z","shell.execute_reply.started":"2025-04-03T11:08:28.352316Z","shell.execute_reply":"2025-04-03T11:08:28.358754Z"}},"outputs":[{"name":"stdout","text":"fraction of points 0.9600000000000007\n","output_type":"stream"}],"execution_count":65},{"cell_type":"code","source":"d={}\nfor i in random1:\n    d[i]=0\nfor i in random2:\n    d[i]=1\ndata_sorted= np.sort(dataset)\ndef median(s, e, dataset):\n    length = e - s + 1\n    mid1 = (s + e - 1) // 2\n    mid2 = (s + e) // 2\n    if length % 2 == 1:\n        return dataset[mid2]\n    else:\n        return (dataset[mid1] + dataset[mid2]) / 2\noptimal_s = None\noptimal_median1 = None\noptimal_median2 = None\nmin_total_deviation = np.inf\nfor i in range(200):\n    median1= median(0,i,data_sorted)\n    median2= median(i+1,199,data_sorted)\n    total_deviation = np.sum(np.abs(data_sorted[:i+1] - median1)) + np.sum(np.abs(data_sorted[i+1:] - median2))\n    if total_deviation < min_total_deviation:\n        min_total_deviation = total_deviation\n        optimal_s = i+1\n        optimal_median1 = median1\n        optimal_median2 = median2\nprint(f\"Optimal split: {optimal_s} points in Cluster 1 and {200 - optimal_s} points in Cluster 2\")\nprint(f\"Cluster 1 median: {optimal_median1}\")\nprint(f\"Cluster 2 median: {optimal_median2}\")\nprint(f\"Minimum total deviation: {min_total_deviation}\")\naccuracy=0\nfor i in range(200):\n    if i< optimal_s:\n        accuracy+=(d[data_sorted[i][0]]==0)/200\n    else:\n        accuracy+=(d[data_sorted[i][0]]==1)/200\nprint(\"accuracy of k median\",accuracy )   ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:08:29.934361Z","iopub.execute_input":"2025-04-03T11:08:29.934732Z","iopub.status.idle":"2025-04-03T11:08:29.951091Z","shell.execute_reply.started":"2025-04-03T11:08:29.934701Z","shell.execute_reply":"2025-04-03T11:08:29.950001Z"}},"outputs":[{"name":"stdout","text":"Optimal split: 101 points in Cluster 1 and 99 points in Cluster 2\nCluster 1 median: [0.32408397]\nCluster 2 median: [3.25049285]\nMinimum total deviation: 154.90327402700652\naccuracy of k median 0.9950000000000008\n","output_type":"stream"}],"execution_count":66},{"cell_type":"markdown","source":"We can observe that k median is providing very good accuracy as compared to k means. As k-median is less sensitive to outliers.","metadata":{}},{"cell_type":"markdown","source":"## Question 4\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport random\nimport string\ndef generate_random_string(length=100):\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ncorpus_size = 1_000_000\ncorpus = np.array([generate_random_string() for _ in range(corpus_size)])\nquery_size = 5000\nquery_from_corpus = np.random.choice(corpus, query_size // 2, replace=False)  \nquery_new = np.array([generate_random_string() for _ in range(query_size // 2)])  \nquery_set = np.concatenate((query_from_corpus, query_new))\nnp.random.shuffle(query_set)\nprint(\"Corpus Sample:\", corpus[:5])\nprint(\"Query Set Sample:\", query_set[:5])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T21:51:02.941857Z","iopub.execute_input":"2025-04-03T21:51:02.942205Z","iopub.status.idle":"2025-04-03T21:51:12.653651Z","shell.execute_reply.started":"2025-04-03T21:51:02.942177Z","shell.execute_reply":"2025-04-03T21:51:12.652479Z"}},"outputs":[{"name":"stdout","text":"Corpus Sample: ['zbZLL1v0o8z2L81p7ftQO6neCsgrOCDb0IxozC6dRx7EIlBYAERAJxbKJoipuGJd9EibV1zxuoQWqjygf7oKHHCqvNYu1v2VOitt'\n 'w3Hns8lsd59XFjEtSYZio1GgmgjfxVIU31XTecf6j0s5DmMv4pbYeZAuhuYVYpIi4DIkiLlSj9MD5FiacMBkyEXxnCpYWnvOL2ca'\n 'pozxabRpXuHGJA3wAjCpmY5zXUGFqtgODTXWcvFi7xw9ci19PotBhbX3F6czhI2lw0MkYcIjcDbJYAdSJ2hotjA1MU6ZmdRow116'\n 'GxKo92romegD2s1cZZPLualUBYsNeXtRcDQc5LgQRuSeVgrg3CAzId5vwpPORyGGhVIWyKApI551i2HOpUIZtHHcgXY8jyrUqMpU'\n '7qWuBGFQKwljvGix65gh7IbcLwuAL22HgUka12UAd4VT5vRXTlCw7NpSLrWRUvnhxpwZLgTpvrHHJDHh3hK0rlf2Z44AepAYIaK2']\nQuery Set Sample: ['pEqyk8CL9G7F5oDgs7sGxAxgkLhIYTEt4hpgLmSBxh4hMcjypCvDBWwQ2e0iiSADOiFDDmtrw84VEvixbjuut6AEs9cGKRvXBNsj'\n 'lUWRKXZgPT7Uk53HsPdTqfkEiAbDgSoEv1UOYNoFP7R9U16c4yo9wAbSKnEQin8G2akbZgAow8CGLKiBzplGGUYWlTje3JEeNpxe'\n '9z0VSYuhpb12DkhxWdopg13BhCi1TlLuVZMvlyiAWdf1IGXuH2Xy0KyyTUmNfnnjqYRVpAJgYVjo6fciDEvNIV8t9EV5NRASExfe'\n '25rxQwosCM2rdK39Vbz92HqWmsZK6YW2XzmjQfmcIfimwcoX8GU4rh3sl60XMNrii9WOvj9rpONWhSJLNahu58AAzjK2ZnlX774f'\n '2z7ytpnRemQjgi7e06bbAWSThvzcBPl6p8DMDavZXWXnqbDKIgATseDKBbjUXKeBXdF2i56RWcjoLmorh9quhhRAesfq8fMM0fKD']\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import numpy as np\nimport random\nimport string\nimport hashlib\n\nclass BloomFilter:\n    def __init__(self, m, k):\n        self.m = m  # Size of bit array\n        self.k = k  # Number of hash functions\n        self.bit_array = np.zeros(m, dtype=bool)\n        self.seeds = [random.randint(0, 10**6) for _ in range(k)]  # k random seeds\n\n    def _hash(self, item, seed):\n        hasher = hashlib.md5((str(seed) + item).encode('utf-8'))\n        return int(hasher.hexdigest(), 16) % self.m\n\n    def add(self, item):\n        for seed in self.seeds:\n            index = self._hash(item, seed)\n            self.bit_array[index] = True\n\n    def contains(self, item):\n        return all(self.bit_array[self._hash(item, seed)] for seed in self.seeds)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T21:51:12.654833Z","iopub.execute_input":"2025-04-03T21:51:12.655205Z","iopub.status.idle":"2025-04-03T21:51:12.661301Z","shell.execute_reply.started":"2025-04-03T21:51:12.655174Z","shell.execute_reply":"2025-04-03T21:51:12.660313Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"## found optimal m for less the 5% false rate using \n $\n m = -\\frac{k n}{\\ln(1 - P^{\\frac{1}{k}})}\n $","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\ndef optimal_m(n, P, k):\n    return int(- (k * n) / np.log(1 - P**(1/k)))\nk_values = [2, 4, 6, 8, 10, 12]\n\nn = len(corpus)  \nP_target = 0.05 \n\nm = optimal_m(n, P_target, 6) \nprint(m)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T21:55:14.352942Z","iopub.execute_input":"2025-04-03T21:55:14.353299Z","iopub.status.idle":"2025-04-03T21:55:14.358285Z","shell.execute_reply.started":"2025-04-03T21:55:14.353270Z","shell.execute_reply":"2025-04-03T21:55:14.357429Z"}},"outputs":[{"name":"stdout","text":"6425017\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nm = 10_000_000 \n  \nfalse_positive_rates = []\n\nfor k in k_values:\n    bloom_filter = BloomFilter(m, k)\n\n    for item in corpus:\n        bloom_filter.add(item)\n    false_positives = sum(1 for query in query_new if bloom_filter.contains(query))\n    false_positive_rate = false_positives / (query_size // 2)  \n    false_positive_rates.append(false_positive_rate)\n    print(f\"k={k}, False Positives: {false_positives}, False Positive Rate: {false_positive_rate:.4f}\")\noptimal_k = k_values[np.argmin(false_positive_rates)]\noptimal_fp_rate = min(false_positive_rates)\n\nplt.figure(figsize=(8, 5))\nplt.plot(k_values, false_positive_rates, marker='o', linestyle='-', color='b')\nplt.xlabel(\"Number of Hash Functions (k)\")\nplt.ylabel(\"False Positive Rate\")\nplt.title(\"Effect of k on False Positive Rate\")\nplt.xticks(k_values)\nplt.grid()\nplt.show()\n\nprint(f\"Optimal k: {optimal_k}, Empirical False Positive Rate: {optimal_fp_rate:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-03T11:08:59.081512Z","iopub.execute_input":"2025-04-03T11:08:59.081794Z","iopub.status.idle":"2025-04-03T11:10:35.840800Z","shell.execute_reply.started":"2025-04-03T11:08:59.081771Z","shell.execute_reply":"2025-04-03T11:10:35.839631Z"}},"outputs":[{"name":"stdout","text":"k=2, False Positives: 78, False Positive Rate: 0.0312\nk=4, False Positives: 29, False Positive Rate: 0.0116\nk=6, False Positives: 17, False Positive Rate: 0.0068\nk=8, False Positives: 22, False Positive Rate: 0.0088\nk=10, False Positives: 20, False Positive Rate: 0.0080\nk=12, False Positives: 37, False Positive Rate: 0.0148\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Optimal k: 6, Empirical False Positive Rate: 0.0068\n","output_type":"stream"}],"execution_count":70}]}